{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "Alert",
            "id": "component-Alert-5ee331dca1370c0517062496d8dfdb00cc36fcf2ad087b2b15c5277a6f1cac5f88fe2f1856159abcfbc5257b0278e6576abc65e2d3124d4c0a29aef45965b075",
            "file": "projects/jenga-ds/src/lib/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jenga-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'jenga-alert',\n  templateUrl: './alert.component.html',\n})\nexport class Alert {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<p>alert works!</p>\n"
        },
        {
            "name": "Button",
            "id": "component-Button-f2b4e3234a66ad4217ceb095880cd6f1f738553f3b463d6af76ef91a2089643442ed9f4e1a8c4c243514889f8c80b689a37dfd82e572d25220056a97aa5b6b63",
            "file": "projects/jenga-ds/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jenga-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 632,
                            "end": 652,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 633,
                                "end": 640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>primary</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton color\n\ncan either be 'primary' 'secondary' 'tertiary' 'error' 'warning' 'success' or a valid hex code\n",
                    "description": "<p>Button color</p>\n<p>can either be &#39;primary&#39; &#39;secondary&#39; &#39;tertiary&#39; &#39;error&#39; &#39;warning&#39; &#39;success&#39; or a valid hex code</p>\n",
                    "line": 33,
                    "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"error\" | \"warning\" | \"success\" | string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton icon\n\noptional\n",
                    "description": "<p>Button icon</p>\n<p>optional</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 260,
                            "end": 273,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 261,
                                "end": 269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 54,
                    "type": "\"sm\" | \"md\" | \"lg\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 394,
                            "end": 411,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 395,
                                "end": 402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>text</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton type\n\ncan either be elevated, filled, tonal, outlined, text\n",
                    "description": "<p>Button type</p>\n<p>can either be elevated, filled, tonal, outlined, text</p>\n",
                    "line": 24,
                    "type": "\"elevated\" | \"filled\" | \"tonal\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'jenga-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class Button {\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = '';\n\n  /**\n   * Button type\n   *\n   * can either be elevated, filled, tonal, outlined, text\n   * @default text\n   */\n  @Input()\n  type: 'elevated' | 'filled' | 'tonal' | 'outlined' | 'text' = 'text';\n\n  /**\n   * Button color\n   *\n   * can either be 'primary' 'secondary' 'tertiary' 'error' 'warning' 'success' or a valid hex code\n   * @default primary\n   */\n  @Input()\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'error'\n    | 'warning'\n    | 'success'\n    | string = 'primary';\n\n  /**\n   * Button icon\n   *\n   * optional\n   */\n  @Input()\n  icon: string = '';\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'sm' | 'md' | 'lg' = 'md';\n\n  @Output()\n  onClick = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/**\n* The main color reads from the hue, saturation and lightness\n* css custom properties to enable easy adjustment of the lightness\n* as needed\n*/\n$btn-main-color: hsl(\n  var(--btn-main-color-hue, 210),\n  var(--btn-main-color-saturation, 100%),\n  var(--btn-main-color-lightness, 56%)\n);\n\nbutton,\n.btn {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: inherit;\n  font-size: 100%;\n  font-weight: inherit;\n  text-transform: none;\n  line-height: inherit;\n  color: inherit;\n  border-width: 0;\n  border-style: solid;\n  cursor: pointer;\n}\n\nbutton,\n.btn,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  appearance: button;\n  background-color: transparent;\n  background-image: none;\n}\n\n.btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  border: solid 1px transparent;\n\n  &--sm {\n    height: 2rem;\n    padding: 0 1rem;\n    font-size: 0.75em;\n    border-radius: 8px;\n    letter-spacing: 0.02em;\n\n    .btn__icon {\n      transform: translateX(-4px);\n      font-size: 1.5em;\n    }\n  }\n\n  &--md {\n    height: 2.5rem;\n    padding: 0 1.5rem;\n    font-size: 0.875em;\n    border-radius: 10px;\n\n    .btn__icon {\n      transform: translateX(-8px);\n      font-size: 1.5em;\n    }\n  }\n\n  &--lg {\n    height: 3.25rem;\n    padding: 0 2.5rem;\n    font-size: 1.2em;\n    border-radius: 12px;\n\n    .btn__icon {\n      transform: translateX(-12px);\n      font-size: 1.5em;\n    }\n  }\n\n  &__icon {\n    transform: translateX(-8px);\n  }\n\n  &--elevated {\n    color: $btn-main-color;\n    background: var(--btn-color, white);\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\n  }\n\n  &--filled {\n    background: $btn-main-color;\n    color: var(--btn-color, white);\n  }\n\n  &--tonal {\n    background: hsl(\n      var(--btn-background-hue, 210),\n      var(--btn-background-saturation, 100%),\n      96%\n    );\n    color: var(--btn-color, hsl(210, 100%, 56%));\n  }\n\n  &--outlined {\n    color: $btn-main-color;\n    border-color: $btn-main-color;\n  }\n\n  &--text {\n    color: $btn-main-color;\n    background: transparent;\n    border-color: transparent;\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"btn\"\n  [ngClass]=\"{\n    'btn--sm': this.size === 'sm',\n    'btn--md': this.size === 'md',\n    'btn--lg': this.size === 'lg',\n    'btn--filled': this.type === 'filled',\n    'btn--outlined': this.type === 'outlined',\n    'btn--text': this.type === 'text',\n    'btn--elevated': this.type === 'elevated',\n    'btn--tonal': this.type === 'tonal'\n  }\"\n>\n  <!-- TODO: ADD COLOR ADJUSTMENTS -->\n  <span\n    *ngIf=\"icon\"\n    class=\"material-symbols-rounded btn__icon\"\n    data-testid=\"btn-icon\"\n    >{{ icon }}</span\n  >\n  <span data-testid=\"btn-label\">{{ label }}</span>\n</button>\n"
        }
    ],
    "modules": [
        {
            "name": "JengaDsModule",
            "id": "module-JengaDsModule-dc667f732003381fb00828eb1f86c70f966896fa5daa9998eb1b2840d5cd1b7096655ac11e2ee030d68ac9e0ce6e5ff926b91f0ceb2c072abf76c5e3b3303867",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/jenga-ds/src/lib/jenga-ds.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Button } from './button/button.component';\nimport { Alert } from './alert/alert.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [Alert, Button],\n  imports: [BrowserModule],\n  exports: [Alert, Button],\n})\nexport class JengaDsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Alert"
                        },
                        {
                            "name": "Button"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Alert"
                        },
                        {
                            "name": "Button"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "composeStory(DefaultStory, Meta)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Alert>",
                "defaultValue": "(args: Alert) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "stories/Alert.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Alert>",
                    "defaultValue": "(args: Alert) => ({\n  props: args,\n})"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/Button.test.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "composeStory(DefaultStory, Meta)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 8,
        "status": "low",
        "files": [
            {
                "filePath": "projects/jenga-ds/src/lib/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/jenga-ds/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Button",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "stories/Alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}